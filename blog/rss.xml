<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>Intellectus Data Fabric Blog</title>
        <link>https://experimenting-to-learn.github.io/publication/blog</link>
        <description>Intellectus Data Fabric Blog</description>
        <lastBuildDate>Thu, 07 Dec 2023 00:00:00 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>en</language>
        <item>
            <title><![CDATA[AWS에서 Roles Anywhere로 credential 관리 대체하기]]></title>
            <link>https://experimenting-to-learn.github.io/publication/blog/iam-role-anywhere</link>
            <guid>https://experimenting-to-learn.github.io/publication/blog/iam-role-anywhere</guid>
            <pubDate>Thu, 07 Dec 2023 00:00:00 GMT</pubDate>
            <description><![CDATA[AWS IAM Roles Anywhere는  AWS 내에서 Role을 이용해서 임시 credential을 사용하는 것과 동일하게, 외부에서도 Role을 이용해서 임시 credential을 이용해서 AWS내의 자원을 사용할 수 있도록 한다. IAM User에 credential을 생성하여 프로그램 환경 변수나 aws CLI config 사용하는 것과 비교 했을 때 보안이 강화된다. 또한, Devfile 과 같은 개발 환경 자동화 도구를 통합하여 개별 개발자가 복잡한 개발환경 설정에서 자유로워 진다.]]></description>
            <content:encoded><![CDATA[<p><a href="httphttps://docs.aws.amazon.com/rolesanywhere/latest/userguide/introduction.html" target="_blank" rel="noopener noreferrer">AWS IAM Roles Anywhere</a>는  AWS 내에서 Role을 이용해서 임시 credential을 사용하는 것과 동일하게, 외부에서도 Role을 이용해서 임시 credential을 이용해서 AWS내의 자원을 사용할 수 있도록 한다. IAM User에 credential을 생성하여 프로그램 환경 변수나 aws CLI config 사용하는 것과 비교 했을 때 보안이 강화된다. 또한, Devfile 과 같은 개발 환경 자동화 도구를 통합하여 개별 개발자가 복잡한 개발환경 설정에서 자유로워 진다.</p>
<p>Roles Anywhere 설정하고 <a href="https://docs.aws.amazon.com/codecatalyst/latest/userguide/devenvironment.html" target="_blank" rel="noopener noreferrer">Dev Environments in CodeCatalyst</a> 인스턴스에 적용하는 예를 통해서 구현 방법에 대해서 알아본다.</p>
<ul>
<li><strong>전체 흐름</strong></li>
<li><strong>AWS Private Certificate Authority를 이용한 사설 인증서(Private certificate) 발급</strong></li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="aws-private-certificate-authority를-이용한-사설-인증서private-certificate-발급">AWS Private Certificate Authority를 이용한 사설 인증서(Private certificate) 발급<a href="https://experimenting-to-learn.github.io/publication/blog/iam-role-anywhere#aws-private-certificate-authority%EB%A5%BC-%EC%9D%B4%EC%9A%A9%ED%95%9C-%EC%82%AC%EC%84%A4-%EC%9D%B8%EC%A6%9D%EC%84%9Cprivate-certificate-%EB%B0%9C%EA%B8%89" class="hash-link" aria-label="Direct link to AWS Private Certificate Authority를 이용한 사설 인증서(Private certificate) 발급" title="Direct link to AWS Private Certificate Authority를 이용한 사설 인증서(Private certificate) 발급">​</a></h2>
<p>openssl을 이용해서 직접 사설 인증서를 발급하고 IAM &gt; Roles &gt; Roles Anywhere &gt; Create a trust anchor 에서 직접 입력하는 방법도 있지만, 여기서는 사설 인증서를 관리할 수 있는 <a href="https://docs.aws.amazon.com/privateca/latest/userguide/PcaWelcome.html" target="_blank" rel="noopener noreferrer">AWS Private Certificate Authority</a>를 이용한다.</p>
<p>먼저 사설 인증서를 발급하기 위해서 CA(인증 기관)을 생성한다.</p>
<p><img loading="lazy" alt="create-a-private-CA" src="https://experimenting-to-learn.github.io/publication/assets/images/create-a-private-CA-79d6fc21f62e6f4f8830420c7b22c7a9.png" width="3231" height="915" class="img_ev3q"><em>AWS Private Certificate Authority &gt; Private certificate authorities</em></p>
<p><img loading="lazy" alt="create-CA-form-part1" src="https://experimenting-to-learn.github.io/publication/assets/images/pca-part1-8a99507d4ddc727fa97ec14f3ff64a3f.png" width="3056" height="1859" class="img_ev3q"><em>Mode: General-purpose | Type: Root</em>
<img loading="lazy" alt="create-CA-form-part2" src="https://experimenting-to-learn.github.io/publication/assets/images/pca-part2-7e20fffe99d44bce93c08a5aa43aaf43.png" width="2214" height="2475" class="img_ev3q"><em>CSR</em>
<img loading="lazy" alt="create-CA-form-part3" src="https://experimenting-to-learn.github.io/publication/assets/images/pca-part3-4104b6aeb8c2f81f47ea14f538fd8350.png" width="3058" height="1447" class="img_ev3q"><em>algorithm: RSA 2048</em></p>]]></content:encoded>
            <category>aws</category>
            <category>cloud-native-develop</category>
            <category>IAM</category>
            <category>RoleAnywhere</category>
        </item>
        <item>
            <title><![CDATA[Serverless]]></title>
            <link>https://experimenting-to-learn.github.io/publication/blog/dev-with-serverless</link>
            <guid>https://experimenting-to-learn.github.io/publication/blog/dev-with-serverless</guid>
            <pubDate>Tue, 05 Dec 2023 00:00:00 GMT</pubDate>
            <description><![CDATA[Serverless 방식이 추구하는 성과는 충분히 설득력이 있다. 유지보수와 변경관리를 쉽게 만들고, 운영 환경에서의 자원 관리를 효율성을 높인다. 이 성과를 취하기 위해서는 변화를 수용해야 한다.]]></description>
            <content:encoded><![CDATA[<p>Serverless 방식이 추구하는 성과는 충분히 설득력이 있다. 유지보수와 변경관리를 쉽게 만들고, 운영 환경에서의 자원 관리를 효율성을 높인다. 이 성과를 취하기 위해서는 변화를 수용해야 한다.
경험에 비추어 봤을 때, 팀 단위로 움직이고 있는 프로젝트에서는 변화의 정도에 비례하여 저항이 발생한다.
Serverless 방식이 제공하는 구조적인 장점을 온전히 취하면서, 프로젝트에 환경에 맞게 최적화 하는 일은 기존에 동작하고 있는 업무 프로세스의 성숙도가 높을수록 큰 저항이 발생할 가능성이 높다.</p>
<p>이 글은 개별 엔지니어의 생산성을 넘어서 프로젝트 혹은 팀의 생산성과 성과에 대해 고민하고 있는 소프트웨어 엔지니어들과 나누고 싶은 이야기이다.</p>
<p>코드 작성에 사용하는 툴이나 프로그래밍 언어, 혹은 새로운 개발 프레임워크의 도입은 Serverless 방식을 온전히 적용하는 것에 비하면 단순한 변화라 할 정도다.
이 포스트에서 경험을 바탕으로 다음의 주제에 대해서 생각을 나눠 보고자 한다:</p>
<ul>
<li><strong>왜 Serverless 방식을 선택해야 할까?</strong></li>
<li><strong>바꿔야 하는 것들</strong></li>
<li><strong>주어진 비즈니스 환경에서 성공에 기여하기 위한 소프트웨어 개발 전략과 기술적인 구현 사례</strong></li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="왜-serverless-방식을-선택해야-할까">왜 Serverless 방식을 선택해야 할까?<a href="https://experimenting-to-learn.github.io/publication/blog/dev-with-serverless#%EC%99%9C-serverless-%EB%B0%A9%EC%8B%9D%EC%9D%84-%EC%84%A0%ED%83%9D%ED%95%B4%EC%95%BC-%ED%95%A0%EA%B9%8C" class="hash-link" aria-label="Direct link to 왜 Serverless 방식을 선택해야 할까?" title="Direct link to 왜 Serverless 방식을 선택해야 할까?">​</a></h2>
<p>왜 해야 하는지  따라서 어떻게 할 것인가가 결정된다.</p>
<p>소프트웨어 업계에서 'No Silver Bullet'<sup><a href="https://experimenting-to-learn.github.io/publication/blog/dev-with-serverless#user-content-fn-1-201878" id="user-content-fnref-1-201878" data-footnote-ref="true" aria-describedby="footnote-label">1</a></sup>은 널리 알려진 명제이다. 특정 관점에서 우월할 수 있는 어떤 선택도 다른 관점과 상충(trade-off) 되는 경우는 매우 흔하다.
무엇보다도 소프트웨어 시스템은 순수 창작물이 아니라 비즈니스를 지원하고 혁신하기 위해 사용되기 때문에 비즈니스 환경 변화에 따라 적응해야 하는 것은 필연적이다.
이러한 특성에 비추어 Serverless 방식의 도입의 이유는 단순하고 직관적이다. 비즈니스 환경의 움직임을 자동차와 비교하면 이 생태계는 항상 accelerator-pedal을 힘껏 밟고 있다.
단순히 특정 방향으로 움직이고 있는것이 아니라 항상 가속을 하고 있는 것이다. 역사적으로 이 위태로워 보이는 질주를 지속하는 방법은 감속 장치((brake))를 발전시키는 것이 아니라, 더 단단한 섀시(chassis)와 스테빌라이저(stabilizer)를 보완하면서 동시에 더 빠른 가속 장치를 추가하는 것이다. Serverless 방식은 새로운 가속 장치이다.</p>
<p>산업 현장에서는 소프트웨어 시스템을 활용해서 비즈니스 기회를 확장하고 실행을 가속화 하고있다. 소프트웨어 제품의 구현과 유지보수도 이러한 속도에 발을 맞춰야 한다. 이 변화는 이미 정립된 기술 분야의 연속적인 발전으로는 설명하기 힘들다. 이 변화의 속도는 구조적인 진화에서 비롯된 것이다.</p>
<p>소프트웨어를 기초로 인터넷을 통해 연결된 디지털 세계는 비즈니스의 한 관점에서 보면 일종의 실험실이다. 위험(risk)를 효과적으로 관리 하면서 구상하고 있는 비즈니스를 실증하고 동작시켜볼 수 있는 기회다. 시장 경쟁 구도 속에서 이 실험을 얼마나 효율적으로 실행하고 효과를 극대화 하느냐 하는 것이 비즈니스의 경쟁력에 영향을 미친다. 개별 실험들은 시스템화 되면서 체계적으로 조직되어 개별 실험의 생명 주기는 더 빨라지고, 데이터로 확인된 기회들은 비즈니스 가치로 변환된다. 소프트웨어 개발, 즉 구현 관점에서는 실질적으로 동작하여 사용자에게 전달될 수 있는 소프트웨어 제품들이 이러한 프로세스에 맞춰 공급돼야 한다. 빨리 만들어서 사용자에게 공개 해야 하는 것이다.</p>
<p>일정 수준 이상 품질의 소프트웨어를 개발하는 역량은 개별 엔지니어의 역량과 밀접한 관련성이 있을 수 있다. 하지만 프로젝트의 규모가 일정 수준 이상 커지면 개인의 역량으로는 제어할 수 없는 위험 요소들이 생긴다. 그 중 한가지가 제품을 배포하고 변경을 관리하는 부분이다. 소프트웨어의 본질적인 속성에 의해 소프트웨어는 지속적으로 변경된다. 이 속성은 비즈니스 환경의 변화를 수용할 수 있는 기초가 되기도 한다. 문제는 이 변경이 동작하고 있는 제품과 지원하고 있는 비즈니스 성과에 영향을 미치는 위험 요소라는 것이다. 개발 과정에서 발견되지 못한 프로그램 오류나 기대하지 않은 부작용(side effects)과 같은 현상을 개별 엔지니어의 역량 만으로 통제 하는 것은 불가능한 일이다.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="바꿔야-하는-것들">바꿔야 하는 것들<a href="https://experimenting-to-learn.github.io/publication/blog/dev-with-serverless#%EB%B0%94%EA%BF%94%EC%95%BC-%ED%95%98%EB%8A%94-%EA%B2%83%EB%93%A4" class="hash-link" aria-label="Direct link to 바꿔야 하는 것들" title="Direct link to 바꿔야 하는 것들">​</a></h2>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="운영-환경코드가-최종적으로-동작하는-환경에서-개발하기">운영 환경(코드가 최종적으로 동작하는 환경)에서 개발하기<a href="https://experimenting-to-learn.github.io/publication/blog/dev-with-serverless#%EC%9A%B4%EC%98%81-%ED%99%98%EA%B2%BD%EC%BD%94%EB%93%9C%EA%B0%80-%EC%B5%9C%EC%A2%85%EC%A0%81%EC%9C%BC%EB%A1%9C-%EB%8F%99%EC%9E%91%ED%95%98%EB%8A%94-%ED%99%98%EA%B2%BD%EC%97%90%EC%84%9C-%EA%B0%9C%EB%B0%9C%ED%95%98%EA%B8%B0" class="hash-link" aria-label="Direct link to 운영 환경(코드가 최종적으로 동작하는 환경)에서 개발하기" title="Direct link to 운영 환경(코드가 최종적으로 동작하는 환경)에서 개발하기">​</a></h3>
<p>코드를 작성한 개발자가 확인해야 하는 것은 이 코드가 실제 사용자의 요청을 제대로 처리할 수 있는가 하는 것이다. 소프트웨어가 놀라울 정도로 잘 작동하기 때문에 사람들은 종종 실체적 복잡성과 위험에 대해 잘 생각하지 않는 듯 하다. 개발 환경에서 실행한 빌드의 결과와 배포 과정에서 실행한 빌드의 결과는 정말 같을까? 개발 환경의 느슨한 보안 정책으로 인해 잘 동작하던 외부 API연동은 운영 환경에서도 당연히 문제 없이 동작할까? 프로그램이 참조하고 있는 특정 환경 변수의 값은 내 컴퓨터의 메모장에만 존재하는 것은 아닐까? 컨테이너 기술의 보급은 큰 의미가 있는 진보이다. 작성된 코드가 최종적으로 사용자에 의해 사용될 수 있도록 만들기 위한 모든 단계에서 위험성을 제어할 수 있는 기반을 마련했다.</p>
<p>Serverless 방식을 고려 한다면 운영 환경은 일반적으로 클라우드 서비스가 제공한다. 클라우드 서비스에서 동작하는 개발 환경이 필요하고, 상당히 잦은 주기로 로컬 개발 환경의 작업물이 동기화 되고 테스트 케이스의 실행 결과를 확인할 수 있어야 한다. 여기에 더해서 Serverless 어플리케이션의 주요 전략 중 하나가 상태 관리의 책임을 분리하는 stateless라는 것을 생각 해 본다면, 상태를 관리하는 어떤 컴포넌트와의 연동이 필요할 것이다. 우리의 경험을 통해서 제안하고자 하는 방법은 클라우드 환경에 개별 소프트웨어 엔지니어를 위한 개발 환경을 제공하는 것이다. <a href="https://github.com/features/codespaces" target="_blank" rel="noopener noreferrer">github에서 제공하는 Codespaces</a>와 <a href="https://aws.amazon.com/codecatalyst/" target="_blank" rel="noopener noreferrer">AWS의 CodeCatalyst</a>와 같은 서비스가 좋은 대안이다. 우리 팀은 개발과 운영 환경으로 사용하고 있는 AWS와 더 쉬운 통합을 위해 CodeCatalyst를 선택했다.</p>
<ul>
<li><a href="https://experimenting-to-learn.github.io/publication/blog/codecatalyst-with-lambda">CDE (Cloud Development Environment)에서 개발하고 자동으로 배포하기: Amazon CodeCatalyst 와 AWS Lambda 이용</a></li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="주어진-비즈니스-환경에서-성공에-기여하기-위한-소프트웨어-개발-전략과-기술적인-구현-사례">주어진 비즈니스 환경에서 성공에 기여하기 위한 소프트웨어 개발 전략과 기술적인 구현 사례<a href="https://experimenting-to-learn.github.io/publication/blog/dev-with-serverless#%EC%A3%BC%EC%96%B4%EC%A7%84-%EB%B9%84%EC%A6%88%EB%8B%88%EC%8A%A4-%ED%99%98%EA%B2%BD%EC%97%90%EC%84%9C-%EC%84%B1%EA%B3%B5%EC%97%90-%EA%B8%B0%EC%97%AC%ED%95%98%EA%B8%B0-%EC%9C%84%ED%95%9C-%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4-%EA%B0%9C%EB%B0%9C-%EC%A0%84%EB%9E%B5%EA%B3%BC-%EA%B8%B0%EC%88%A0%EC%A0%81%EC%9D%B8-%EA%B5%AC%ED%98%84-%EC%82%AC%EB%A1%80" class="hash-link" aria-label="Direct link to 주어진 비즈니스 환경에서 성공에 기여하기 위한 소프트웨어 개발 전략과 기술적인 구현 사례" title="Direct link to 주어진 비즈니스 환경에서 성공에 기여하기 위한 소프트웨어 개발 전략과 기술적인 구현 사례">​</a></h2>
<p>Poc(Proof of concept) 수행의 목적은 '만들어보는 것'이 아니라, 본격적인 비즈니스 모델의 실현에 진입하기 전에 비즈니스 모델의 가설을 데이터를 통해 검증하는 것이다. 동작하는 시스템을 통해 이해당사자 또는 불특정 사용자에게 아이디어를 노출시켜 피드백을 수집하고 분석하는 일이다. 이 과정은 빠르고 효율적이어야 한다. 또 한번 강조하고 싶은 것은 구현하는 것 자체가 목적이 아니라 아이디어에 대한 데이터를 확보하는 것이 진짜 목적이라는 것이다.</p>
<p>이러한 작업의 반복은 생각보다 유쾌하지 않다. 단순한 기능이 아니라 단 하나라도 비즈니스 시나리오를 실행할 수 있어야 한다. 유의미한 데이터를 확보하기 위해서는 시장에서의 비교 우위를 주장할 수 있을 정도는 아니더라도 일반 사용자들이 일정 시간 머물면서 써볼 수 있을 정도는 돼야 한다. 트래픽이 어느정도 발생해야 데이터에 대한 해석이 가치가 있게 되는 경우들도 있기에 특정 목적의 마케팅이나 홍보 같은 활동을 진행할 수 있도록 시스템이 지속적으로 운영돼야 한다. 아직 비즈니스 모델 전체가 작동하지 않는 상황에서 아주 작은 자원들 일지라도 비용은 무시할 수 없다.</p>
<p>이미 알려진 많은 성공 사례에서 민첩하게 비즈니스를 서포트하는 시스템을 어떻게 개발하면 좋은지에 대해서 이야기하고 있지만, 잘 생각해 보면 그런 이야기들은 성공했기 때문에 성립되는 논리 인 경우가 많다. 현실은 아이디어를 아무리 잘 구현해서 치열한 논의 끝에 결정한 우리 브랜드의 도메인에 연결시켜 공개해도 아무일도 일어나지 않는다는 것이다. 팀 내부의 여러 가설을 증명하기 위해 테스트용 트래픽을 발생시키는 또 다른 개발을 하거나, 계속 쏟아져 나오는 여러 개발 및 운영 도구들을 찾아보면서 어떻게 적용시켜야 할지를 고민하면서 스크립트를 작성해야 한다.</p>
<p>그래서 필요한 것은 시간이다. 필요한 구현체를 더 빨리 만들어내고, 또 필요한 무언가를 해야 할 시간 동안 발생하는 비용을 줄이면 무언가를 할 수 있는 시간이 생긴다.</p>
<p>이 문제에 대한 해결 방법 중 하나는 사용량 기반 과금 정책 서비스를 최대한 활용하는 것이었고, 바로 Serverless 방식의 체택이다. 그리고 Microservice 설계 방식을 활용한 재사용이다. 서버를 계속 실행 상태로 유지할 수 없는 환경에서는 소스코드 레포지토리에서 다시 해당 부분을 복사하거나 패키지를 불러와서 코드 레벨에서 재사용이 이루어진다. 하지만 Serverless 방식을 통해 배포된 기능들은 개발 작업 중이거나 배포된 상황에 상관없이 요청하고 응답을 처리하는 방식으로 이미 구현된 기능들을 재사용한다.</p>
<section data-footnotes="true" class="footnotes"><h2 class="anchor anchorWithStickyNavbar_LWe7 sr-only" id="footnote-label">Footnotes<a href="https://experimenting-to-learn.github.io/publication/blog/dev-with-serverless#footnote-label" class="hash-link" aria-label="Direct link to Footnotes" title="Direct link to Footnotes">​</a></h2>
<ol>
<li id="user-content-fn-1-201878">
<p>Frederick P. Brooks Jr., <a href="http://worrydream.com/refs/Brooks-NoSilverBullet.pdf" target="_blank" rel="noopener noreferrer">No Silver Bullet - Essence and Accident in Software Engineering</a> <a href="https://experimenting-to-learn.github.io/publication/blog/dev-with-serverless#user-content-fnref-1-201878" data-footnote-backref="" aria-label="Back to reference 1" class="data-footnote-backref">↩</a></p>
</li>
</ol>
</section>]]></content:encoded>
            <category>serverless</category>
            <category>aws</category>
            <category>cloud-computing</category>
        </item>
        <item>
            <title><![CDATA[CodeCatalyst로 개발환경 구축하기]]></title>
            <link>https://experimenting-to-learn.github.io/publication/blog/codecatalyst-with-lambda</link>
            <guid>https://experimenting-to-learn.github.io/publication/blog/codecatalyst-with-lambda</guid>
            <pubDate>Mon, 04 Dec 2023 00:00:00 GMT</pubDate>
            <description><![CDATA[Amazon CodeCatalyst는  AWS에서 제공하는 CDE (Cloud Development Environments) 서비스다.]]></description>
            <content:encoded><![CDATA[<p><a href="https://aws.amazon.com/ko/codecatalyst/" target="_blank" rel="noopener noreferrer">Amazon CodeCatalyst</a>는  AWS에서 제공하는 CDE (Cloud Development Environments) 서비스다.
CodeCatalyst는 프로젝트의 운영 환경이 AWS 이고, SaaS 방식의 주요 컴포넌트와 함께 사용할 때 좋은 선택이다.</p>
<p>실제 사례를 통해서 Amazon CodeCatalyst를 이용해서 Serverless 개발환경을 구축하는 것을 단계적으로 알아본다.</p>
<ul>
<li><strong>Devfile: 개발환경 기본 컨테이너 이미지 및 의존성 패키지 설치</strong></li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="devfile-개발환경-기본-컨테이너-이미지-및-의존성-패키지-설치">Devfile: 개발환경 기본 컨테이너 이미지 및 의존성 패키지 설치<a href="https://experimenting-to-learn.github.io/publication/blog/codecatalyst-with-lambda#devfile-%EA%B0%9C%EB%B0%9C%ED%99%98%EA%B2%BD-%EA%B8%B0%EB%B3%B8-%EC%BB%A8%ED%85%8C%EC%9D%B4%EB%84%88-%EC%9D%B4%EF%BF%BD%EF%BF%BD%EB%AF%B8%EC%A7%80-%EB%B0%8F-%EC%9D%98%EC%A1%B4%EC%84%B1-%ED%8C%A8%ED%82%A4%EC%A7%80-%EC%84%A4%EC%B9%98" class="hash-link" aria-label="Direct link to Devfile: 개발환경 기본 컨테이너 이미지 및 의존성 패키지 설치" title="Direct link to Devfile: 개발환경 기본 컨테이너 이미지 및 의존성 패키지 설치">​</a></h2>
<p>CodeCatayst에서 실질적인 개발을 위한 컴퓨팅 환경을 제공하는 기능은 Dev Environment 이다. 여기서는 Github에 생성된 코드 레포지토리를 Clone 해서 개발 인스턴스를 생성하도록 한다. 이 때 사용하는 컨테이너 베이스 이미지를 <a href="https://devfile.io/docs/2.0.0/what-is-a-devfile" target="_blank" rel="noopener noreferrer">Devfile</a>를 이용해서 설정 할 수 있다.  별도의 설정 없이 Dev Environment 인스턴스를 생성하면 아래와 같은 devfile.yaml 이 인스턴스 내에 자동으로 생성되며 이 때 이미지 내에 설치된 주요 패키지의 정보는 <a href="https://docs.aws.amazon.com/codecatalyst/latest/userguide/devenvironment-universal-image.html#devenvironment-universal-runtimes-1.0" target="_blank" rel="noopener noreferrer">AWS 문서</a>에서 확인할 수 있다.</p>
<div class="language-yaml codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-yaml codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token key atrule" style="color:#00a4db">schemaVersion</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> 2.0.0</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token key atrule" style="color:#00a4db">metadata</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">name</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> aws</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">universal</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">version</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> 1.0.1</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">displayName</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> AWS Universal</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">description</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> Stack with AWS Universal Tooling</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">tags</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token string" style="color:#e3116c">"aws"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"al2"</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">projectType</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"aws"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token key atrule" style="color:#00a4db">components</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token key atrule" style="color:#00a4db">name</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> aws</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">runtime</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">container</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token key atrule" style="color:#00a4db">image</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> public.ecr.aws/aws</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">mde/universal</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">image</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain">latest</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token key atrule" style="color:#00a4db">mountSources</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token boolean important" style="color:#36acaa">true</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token key atrule" style="color:#00a4db">volumeMounts</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token key atrule" style="color:#00a4db">name</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> docker</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">store</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token key atrule" style="color:#00a4db">path</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> /var/lib/docker</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token key atrule" style="color:#00a4db">name</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> docker</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">store</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">volume</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token key atrule" style="color:#00a4db">size</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> 16Gi</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>본 사례에서는 nodejs 의 버전이 18 이상 필요했기 때문에, devfile.yaml 을 수정해서 레포지토리의 루트 위치에 추가했다.</p>
<div class="language-yaml codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-yaml codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token key atrule" style="color:#00a4db">schemaVersion</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> 2.0.0</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token key atrule" style="color:#00a4db">metadata</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">name</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> aws</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">universal</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">version</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> 1.0.1</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">displayName</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> AWS Universal</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">description</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> Stack with AWS Universal Tooling</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">tags</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token string" style="color:#e3116c">"aws"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"al2"</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">projectType</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"aws"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token key atrule" style="color:#00a4db">components</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token key atrule" style="color:#00a4db">name</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> aws</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">runtime</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">container</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token key atrule" style="color:#00a4db">image</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> public.ecr.aws/aws</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">mde/universal</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">image</span><span class="token punctuation" style="color:#393A34">:</span><span class="token number" style="color:#36acaa">3.0</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token key atrule" style="color:#00a4db">mountSources</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token boolean important" style="color:#36acaa">true</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token key atrule" style="color:#00a4db">volumeMounts</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token key atrule" style="color:#00a4db">name</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> docker</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">store</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token key atrule" style="color:#00a4db">path</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> /var/lib/docker</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token key atrule" style="color:#00a4db">name</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> docker</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">store</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">volume</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token key atrule" style="color:#00a4db">size</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> 16Gi</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<blockquote>
<p>*컨테이너 베이스 이미지의 버전이 latest 인 경우  <a href="https://docs.aws.amazon.com/codecatalyst/latest/userguide/devenvironment-universal-image.html#devenvironment-universal-runtimes-1.0" target="_blank" rel="noopener noreferrer">Universal image 1.0 runtime versions</a>을 참조 하며, 위에서 수정된 것과 같이 특정 버전(<a href="https://docs.aws.amazon.com/codecatalyst/latest/userguide/devenvironment-universal-image.html#devenvironment-universal-runtimes-3.0" target="_blank" rel="noopener noreferrer">3.0</a>)을 명시하여 이미지를 선택할 수 있다.</p>
</blockquote>]]></content:encoded>
            <category>serverless</category>
            <category>aws</category>
            <category>cloud-native-develop</category>
            <category>CodeCatalyst</category>
        </item>
        <item>
            <title><![CDATA[텍스트(자연어) 데이터 인덱스 방식과 활용]]></title>
            <link>https://experimenting-to-learn.github.io/publication/blog/txt-index-with-vector-embeddings</link>
            <guid>https://experimenting-to-learn.github.io/publication/blog/txt-index-with-vector-embeddings</guid>
            <pubDate>Fri, 03 Nov 2023 00:00:00 GMT</pubDate>
            <description><![CDATA[벡터 인덱스와 유사도를 이용해서 이모지(Emoji) 시맨틱 검색 기능 구현하기]]></description>
            <content:encoded><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="벡터-인덱스와-유사도를-이용해서-이모지emoji-시맨틱-검색-기능-구현하기">벡터 인덱스와 유사도를 이용해서 이모지(Emoji) 시맨틱 검색 기능 구현하기<a href="https://experimenting-to-learn.github.io/publication/blog/txt-index-with-vector-embeddings#%EB%B2%A1%ED%84%B0-%EC%9D%B8%EB%8D%B1%EC%8A%A4%EC%99%80-%EC%9C%A0%EC%82%AC%EB%8F%84%EB%A5%BC-%EC%9D%B4%EC%9A%A9%ED%95%B4%EC%84%9C-%EC%9D%B4%EB%AA%A8%EC%A7%80emoji-%EC%8B%9C%EB%A7%A8%ED%8B%B1-%EA%B2%80%EC%83%89-%EA%B8%B0%EB%8A%A5-%EA%B5%AC%ED%98%84%ED%95%98%EA%B8%B0" class="hash-link" aria-label="Direct link to 벡터 인덱스와 유사도를 이용해서 이모지(Emoji) 시맨틱 검색 기능 구현하기" title="Direct link to 벡터 인덱스와 유사도를 이용해서 이모지(Emoji) 시맨틱 검색 기능 구현하기">​</a></h2>
<p>이 글에서는 텍스트(자연어) 데이터의 색인(Index) 방식과 활용 방법에 대해서 기술적으로 설명합니다. 개별적인 텍스트 데이터의 색인 방법인 n-gram의 구체적인 작동 방식을 심도 있게 설명하거나, 자연어 처리(NLP)에 대해 구현(implementation) 관점의 상세한 설명은 이야기하려고 하는 핵심 주제가 아닙니다.</p>
<p>때문에, 자연어 검색 시스템을 전반적으로 이해를 목적으로 하거나, 벡터 유사도(Vector Similarity)를 이용한 시맨틱 검색(Semantic Search)에  관심이 있는 소프트웨어 엔지니어 분들이 읽어보시고 의견을 나누어 보면 좋겠습니다.</p>
<p>데이터 관리를 위한 시스템의 공통적인 요구사항 중 하나는 검색 기능입니다. 일반적인 사용자는 특별한 시스템이 아니더라도 자연어로 작성한 키워드를 입력하고 적절한 결과가 제공될 것으로 기대합니다. 기술적으로 이러한 강력한 성능의 검색 성능에 부합하는 소프트웨어 기능을 직접 구현하는 것은 쉬운 일이 아닙니다.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="키워드로-이모지-검색하기">키워드로 이모지 검색하기<a href="https://experimenting-to-learn.github.io/publication/blog/txt-index-with-vector-embeddings#%ED%82%A4%EC%9B%8C%EB%93%9C%EB%A1%9C-%EC%9D%B4%EB%AA%A8%EC%A7%80-%EA%B2%80%EC%83%89%ED%95%98%EA%B8%B0" class="hash-link" aria-label="Direct link to 키워드로 이모지 �검색하기" title="Direct link to 키워드로 이모지 검색하기">​</a></h3>
<p>메신저나 이메일을 작성할 때 이모지(emoji)의 활용 빈도는 점점 늘어나는 듯 보입니다. 경험적으로도 실용적으로 메시지의 내용을 간결하게 유지 하면서도 뉘앙스를 함께 전달하기 위해서 매우 유용한 커뮤니케이션 도구 중 하나라고 생각합니다.</p>
<p>하지만 상황에 맞는 적절한 이모지를 이용하는 것은 여간 쉬운 일이 아닙니다.  Window에서 기본적인 이모지 검색을 지원하고 있지만 해당 검색 시스템을 이용해 원하는 이모지를 찾을 수 있는 확률이 상대적으로 낮기 때문에 주로 사용했던 것들만 사용하게 됩니다.</p>
<p><img loading="lazy" alt="emoji-windows-app" src="https://experimenting-to-learn.github.io/publication/assets/images/emoji-windows-app-d012785f2260454eaaf13fec865144bd.png" width="2000" height="1343" class="img_ev3q"><em>실제 Window 이모지에서 케이크를 검색한 결과. 🎂(생일케이크)는 보이지 않는다.</em></p>
<p>이러한 이모지 검색이 직관적으로 보여질 수 있는 좋은 사례로 생각되어 이번 검색 기능 구현의 사용 데이터로 설정하였습니다.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="기본적인-synthetic-search-keyword-search">기본적인 Synthetic Search (Keyword Search)<a href="https://experimenting-to-learn.github.io/publication/blog/txt-index-with-vector-embeddings#%EA%B8%B0%EB%B3%B8%EC%A0%81%EC%9D%B8-synthetic-search-keyword-search" class="hash-link" aria-label="Direct link to 기본적인 Synthetic Search (Keyword Search)" title="Direct link to 기본적인 Synthetic Search (Keyword Search)">​</a></h3>
<p>검색 시스템 중 가장 고전적인 방법인 입력된 단어가 포함된 결과를 모두 보여주는 것을 Synthetic Search, Keyword Search라 부르고, 대표적인 방법으로는 N-Gram이 있습니다.</p>
<p><img loading="lazy" alt="synthetic-search-bread" src="https://experimenting-to-learn.github.io/publication/assets/images/synthetic-search-bread-9d00e98ab493b80f83bf0a526c16c18b.png" width="2000" height="2388" class="img_ev3q"><em>n-gram을 이용한 Synthetic Search 결과 1</em></p>
<p><img loading="lazy" alt="synthetic-search-cak" src="https://experimenting-to-learn.github.io/publication/assets/images/synthetic-search-cak-c13c876cd9b7bdf03f6dd083c4b297ea.png" width="2000" height="3140" class="img_ev3q"><em>n-gram을 이용한 Synthetic Search 결과 2 | ‘cak’ 까지만 입력해도 cake가 검색된 것을 볼 수 있다.</em></p>
<p>n-gram에서 n은 숫자를 의미하며 문자열에서 n개의 연속적인 요소를 잘라서 Index로 사용하는 방법입니다(그래서 n을 n-gram token size 라고도 합니다).  예를들어 “DATA”를 n=2인 Bi-gram으로 적용하면, 인덱스는 “DA”, “AT”, “TA”가 생성됩니다.</p>
<p><img loading="lazy" alt="ngram-example" src="https://experimenting-to-learn.github.io/publication/assets/images/ngram-example-0f050dbdded37c32031cd2c370f99c2d.png" width="2000" height="829" class="img_ev3q"><em>n-gram “data” 예시</em>
<img loading="lazy" alt="ngram-mysql" src="https://experimenting-to-learn.github.io/publication/assets/images/ngram-mysql-1724e3eba92f98a957bdfd4b3c15b5cb.png" width="2000" height="879" class="img_ev3q"><em>MySQL에서 n-gram token 수를 확인하는 쿼리. Default는 2이다.</em></p>
<p>한글로 적용하면 “데이터” 에서 “데이”, “이터” 라는 인덱스가 생성됩니다.</p>
<p>이렇게 n-gram을 사용한 full-text search를 하게 되면, 전문에서 부분적으로 인덱스를 가지게 되어 검색의 정확도가 상승하게 됩니다. “아메리카노”를 검색하기 위해서 “아메”라고만 넣어도 “아메리카노”가 나오니까요(물론 “아메”가 포함된 “아메리카” 같은 다른 단어들도 나옵니다). 이를 정렬하는 방법은 관련성 점수, 검색 옵션에 따라서 달라집니다. 특히 한국어, 중국어, 일본어의 경우 단어+단어 조합으로 새로운 문자를 만들 수 있기 때문에 n-gram을 사용하면 검색의 정확도가 더욱 올라갈 수 있습니다.</p>
<p>하지만 n-gram이 무조건 좋은 것은 아닙니다. 검색 결과에서 누락이 발생할 확률이 적다는 장점이 있지만, 인덱스가 늘어남에 따라 DB 용량이 증가한다는 단점 또한 가지고 있기에 상황에 맞춰 적절한 token size(=n) 설정이 필요합니다.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="한걸음-나아간-semantic-search">한걸음 나아간 Semantic Search<a href="https://experimenting-to-learn.github.io/publication/blog/txt-index-with-vector-embeddings#%ED%95%9C%EA%B1%B8%EC%9D%8C-%EB%82%98%EC%95%84%EA%B0%84-semantic-search" class="hash-link" aria-label="Direct link to 한걸음 나아간 Semantic Search" title="Direct link to 한걸음 나아간 Semantic Search">​</a></h3>
<p>그렇다면 모든 검색 시스템을 확실한 n-gram으로 만들어야 할까요? 사랑을 입력했을 때, 하트가 나오고 연인의 모습이 나온다면 어떨까요? ‘이런 것도 나오네?’ 하면서 유저의 검색 만족도가 올라가지 않을까요? 또 케이크를 입력했을 때, 촛불, 풍선 같은 이모지들이 같이 나온다면요?</p>
<p>이렇게 텍스트 자체가 아닌, 그 검색어가 가지고 있는 의미에 기반해서 검색 결과를 보여주는 것이 바로 <strong>Semantic Search</strong> 입니다. 0과 1밖에 모르는 컴퓨터가 어떻게 우리가 사용하는 단어의 의미를 이해하고 관련 결과를 보여줄 수 있는 걸까요?</p>
<p>그건 바로 <strong>데이터의 Vector화</strong>와 **유사도 검색(Similarity Search)**에 달려있습니다. 데이터를 다차원의 공간 속 벡터로 표현하고 해당 벡터와 유사한 벡터를 찾음으로 효율적인 데이터 검색을 진행하며, 이는 곧 사용자의 검색 만족도를 높여줍니다. 유사한 벡터는 다차원의 공간에서 유사한 위치에 존재하기에 다른 말로 ‘최인접 이웃 검색(Nearest Neighbor Search)’이라고도 합니다. 이런 방법은 문서 검색뿐만 아니라 추천시스템, 머신러닝, 컴퓨터비전 등 다양한 곳에서 사용됩니다.</p>
<p>앞서 n-gram이 단어를 n개의 연속된 단어로 쪼개서 인덱스로 설정해 검색했다면, Semantic Search는 데이터를 다차원의 Vector로 만든 Vetor값([12.23, 456.789, …])을 인덱스로 설정해 검색을 진행합니다.</p>
<p><img loading="lazy" alt="synthetic-vs-semantic" src="https://experimenting-to-learn.github.io/publication/assets/images/synthetic-vs-semantic-2f5fc367fbb054058e7784d19af9b150.png" width="2000" height="1257" class="img_ev3q"><em>“Sandwich”를 검색했을 때 보여지는 Keyword Search와 Vector Search의 결과 차이</em></p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="word-to-vector">Word to Vector<a href="https://experimenting-to-learn.github.io/publication/blog/txt-index-with-vector-embeddings#word-to-vector" class="hash-link" aria-label="Direct link to Word to Vector" title="Direct link to Word to Vector">​</a></h3>
<p>단어를 벡터로 수치화하려면 어떻게 해야할까요? 데이터 벡터화 중 텍스트데이터인 단어를 고정된 사이즈의 벡터로 변환하는 ‘단어 임베딩(Word Embedding)’ 방법과 그를 통해 유사도를 측정하는 방법을 알아보겠습니다.</p>
<p><img loading="lazy" alt="word-tokenization" src="https://experimenting-to-learn.github.io/publication/assets/images/word-tokenization-a62da449b675a4b837870cc001dbfd71.png" width="2000" height="1151" class="img_ev3q"><em>문장수집 → 토큰화의 단계<sup><a href="https://experimenting-to-learn.github.io/publication/blog/txt-index-with-vector-embeddings#user-content-fn-1-f4eade" id="user-content-fnref-1-f4eade" data-footnote-ref="true" aria-describedby="footnote-label">1</a></sup></em></p>
<ol>
<li><strong>문장수집</strong></li>
</ol>
<p>: 원하는 대상에서 텍스트 데이터를 수집하는 단계입니다. 이는 자연어 처리를 위한 첫번째 단계로 특정 목적을 가진 텍스트들을 모읍니다. 대부분 웹크롤링이나 ebook 데이터를 사용합니다. 이 단계는 벡터화의 시작점으로 양질의 데이터를 모으는 것이 중요합니다. 좋은 재료로 요리해야 맛있는 음식이 나오는 것 처럼 Input 데이터가 좋아야 Output 또한 좋은 결과가 나오기 때문입니다. 그리고 이렇게 자연언어 연구를 위해 특정한 목적을 가지고 언어의 표본을 추출한 것을 코퍼스(Corpus)라고 합니다.</p>
<ol start="2">
<li><strong>텍스트 전처리 및 토큰화(Tokenization)</strong></li>
</ol>
<p>: 수집한 텍스트에서 불필요한 정보를 제거하거나 바꿔주는 전처리를 거칩니다. 이때, 크롤링할 때 노이즈로 들어오는 html 태그 내용(br, a,…)을 삭제하거나, 대문자를 소문자로 통합하거나 특수문자들을 제거하는 등의 과정이 들어갑니다. 그리고 의미있는 단어(Token)를 기준으로 자르는 작업(Word Tokenization)을 진행합니다. 가장 쉬운 방법으로는  I love data → i, love, data 처럼 구분 기호/띄어쓰기 기준으로 나누는 방법이 있습니다. 하지만 단어 토큰화를 진행할 때엔 고려해야할 사항이 많으므로 상황에 맞춰 전처리 및 토큰화를 진행하는 것이 좋습니다. 예를들어 한국어는 띄어쓰기 기준으로 하면 ‘데이터가 좋아’ → ‘데이터가’, ‘좋아’ 처럼 실질적 의미인 ‘데이터’와 접미사 ‘-가’가 함께 쓰이는 교착어이기 때문에 형태소 분석을 통한 토큰화가 더 유리합니다.</p>
<ol start="3">
<li><strong>단어 임베딩(Word Embedding)</strong></li>
</ol>
<p>: 모든 텍스트를 토큰화 한 후, 각 단어를 고정된 크기의 실수 벡터로 변경하는 단계입니다. 주로 Word2Vec이나&nbsp;GloVe&nbsp;FastText 같은 단어 임베딩 기법을 사용하며 단어를 벡터로 변형하여
은 단어 또는 문서를 벡터로 변환하여 의미론적 뜻(semantic meaning)에 따라 유사한 문서 또는 단어를 효율적으로 검색할 수 있습니다.</p>
<ol start="4">
<li><strong>유사도 구하기</strong></li>
</ol>
<p>: 이제 모든 단어(혹은 문장)은 일정 차원을 가진 벡터로 변경되었습니다. 그렇다면 이제 벡터들 간의 유사도를 구함으로 비슷한 의미를 가진 단어인지 확인하는 순서만 남았습니다.
이런 벡터간 유사도를 구하기 위해 사용되는 방법은 주로 코사인 유사도(Cosine&nbsp;similarity), 유클리디안 거리(Euclidean distance), 자카드 유사도(Jaccard similarity) 3가지가 사용됩니다. 각각의 방법에대해 간단히 소개하겠습니다.</p>
<ul>
<li><strong>코사인 유사도(Cosine&nbsp;similarity)</strong></li>
</ul>
<p>두 벡터사이의 내각를 측정하여 유사도를 측정하는 방법입니다. 백터의 방향이 비슷할 수록(cosθ= 1) 두 벡터는 유사하다고 할 수 있으며, 반대로 직각(cosθ= 0)을 이룰 때에 두 벡터는 유사성이 없음을 의미합니다. Cosθ의 값은 <code>-1~1</code> 사이의 값을 갖지만 자연어 처리의 경우A, B 피쳐 벡터 행렬은 보통 단어 빈도(tf-idf&nbsp;가중치)로 측정되어 음수값이 없으므로 코사인 유사도는 <code>0~1</code> 사이의 값을 갖게 됩니다.
그리고 자연어는 고차원의 벡터를 사용하게 되는데, 코사인 유사도의 경우 벡터 차원수의 영향을 덜 받고, 단어의 다양성으로 발생하는 단어 희소성(sparsity)의 문제에도 민감하지 않기 때문에 자연어 부분에서 유사도를 측정할 때 Cos유사도를 많이 사용하고 있습니다.</p>
<p><img loading="lazy" alt="cos-similarity" src="https://experimenting-to-learn.github.io/publication/assets/images/cos-similarity-160e730a1f727f210cc1b3b7d8c19035.png" width="2000" height="498" class="img_ev3q"><em>Cos유사도 수식 (출처 : Wiki백과<sup><a href="https://experimenting-to-learn.github.io/publication/blog/txt-index-with-vector-embeddings#user-content-fn-2-f4eade" id="user-content-fnref-2-f4eade" data-footnote-ref="true" aria-describedby="footnote-label">2</a></sup>)</em>
<img loading="lazy" alt="vector-space-example" src="https://experimenting-to-learn.github.io/publication/assets/images/vector-space-example-5ea4ac08cd6cfa4919db4a6c7f3d5999.png" width="2000" height="1366" class="img_ev3q"><em>3 단어를 2D의 공간 상에 표시한 예시  출처 : (출처 : Digital begriffsgeschichte: Tracing semantic change using word embeddings) <sup><a href="https://experimenting-to-learn.github.io/publication/blog/txt-index-with-vector-embeddings#user-content-fn-3-f4eade" id="user-content-fnref-3-f4eade" data-footnote-ref="true" aria-describedby="footnote-label">3</a></sup>)</em></p>
<ul>
<li><em>유클리디안 거리(Euclidean distance) :</em></li>
</ul>
<p>두 벡터간의 직선 거리를 계산하여 유사성을 평가하는 방법으로 두 벡터간의 거리가 작을 수록 더 유사하다고 평가 할 수 있습니다. 하지만 다차원의 공간에서 거리를 측정하게 되면 각 데이터들의 유사도가 보존되지 못한다는 단점이 있습니다. 이를 보완하기 위해서 차원을 축소시키는 방법도 있으나 많은 연산을 필요로 합니다.</p>
<p><img loading="lazy" alt="euclidean-distance" src="https://experimenting-to-learn.github.io/publication/assets/images/euclidean-distance-27f3e5d8f625c1cb994e0193032b8c8f.png" width="2000" height="1944" class="img_ev3q"><em>Euclidean distance (출처 : Deep Dive: How do Vector Databases Work<sup><a href="https://experimenting-to-learn.github.io/publication/blog/txt-index-with-vector-embeddings#user-content-fn-4-f4eade" id="user-content-fnref-4-f4eade" data-footnote-ref="true" aria-describedby="footnote-label">4</a></sup>)</em>
<img loading="lazy" alt="euclidean-distance-2" src="https://experimenting-to-learn.github.io/publication/assets/images/euclidean-distance-2-a675a3ccacde790e4022b4d36e0b98ce.png" width="2000" height="1010" class="img_ev3q"><em>Euclidean distance는 동일하지만 유사도가 다른 벡터의 경우 (출처 : Deep Dive: How do Vector Databases Work<sup><a href="https://experimenting-to-learn.github.io/publication/blog/txt-index-with-vector-embeddings#user-content-fn-4-f4eade" id="user-content-fnref-4-f4eade-2" data-footnote-ref="true" aria-describedby="footnote-label">4</a></sup>)</em></p>
<ul>
<li>자카드 유사도 (Jaccard Similarity) :</li>
</ul>
<p>집합에 대한 유사성을 측정하는 방법으로, 자연어 처리의 경우 두 집합(Token)의 공통된 원소의 비율을 측정하여 0~1사이의 값으로 유사도를 나타냅니다.  이는 단어의 순서나 길이, 의미를 무시하고 단순 단어 비교만 진행하기 때문에 정확한 유사성을 판단하지 못한다는 단점이 있습니다.</p>
<p><img loading="lazy" alt="jaccard-similarity" src="https://experimenting-to-learn.github.io/publication/assets/images/jaccard-similarity-44623eda024e28d074435b7a867fc5d3.png" width="2000" height="481" class="img_ev3q"><em>Jaccard Similarity 수식</em></p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="example-architectur-for-semantic-search">Example Architectur for Semantic Search<a href="https://experimenting-to-learn.github.io/publication/blog/txt-index-with-vector-embeddings#example-architectur-for-semantic-search" class="hash-link" aria-label="Direct link to Example Architectur for Semantic Search" title="Direct link to Example Architectur for Semantic Search">​</a></h3>
<p>Github에 있는 예시를 참고하여 Vector를 이용한 Semantic Search를 구현하였습니다. 먼저, 효과적인 작업 진행을 위해 직접 문장을 수집하고 전처리, 단어 임베딩하지 않고, Pre-trained  Vecrtor를 사용했습니다. 사용한 Pre-trained  Vector는 Tweeter(현 X) 데이터를 Corpus로 사용하여 <a href="https://github.com/stanfordnlp/GloVe" target="_blank" rel="noopener noreferrer">GloVe</a>라는 Word Embedding방법으로 2B tweets을 27B의 token으로 나눠 Embedding한 Vector 데이터입니다.</p>
<p><img loading="lazy" alt="vector-data-examples" src="https://experimenting-to-learn.github.io/publication/assets/images/vector-data-examples-4aaa7fef94c371c7d2fae7ef5144d044.png" width="2000" height="378" class="img_ev3q">*glove.twitter.27B.200d.txt의 일부분으로 단어와 특수문자들에 200demansion의 vector가 부여되어 있다. *</p>
<p>위처럼 동일한 Word Embedding model의 Pre-trained Vecrtor를 사용하여 Emoji data의 Emoji 설명과 유저가 입력하는 Search Query를 처리해 동일한 Vector size로 변경하는 작업을 진행했습니다. 이렇게 동일한 Embedding model을 사용해야 동일한 Demansion의 벡터로 나오며, 같은 차원 내에서 유사도를 계산할 수 있습니다.</p>
<p><img loading="lazy" alt="example-architectrue-for-semantic-search" src="https://experimenting-to-learn.github.io/publication/assets/images/example-architectrue-for-semantic-search-5c6e8fe56d3688b968af95910161be4e.png" width="2000" height="738" class="img_ev3q"><em>Pre-trained vector를 이용한 Semantic search Architecture</em>
<img loading="lazy" alt="emoji-vector-example.png" src="https://experimenting-to-learn.github.io/publication/assets/images/emoji-vector-example-a4e8b7060cd079d8bf05aa938b1acf7a.png" width="2000" height="3799" class="img_ev3q"><em>birthday cake을 vector화 한 결과.  단어들의 조합도 동일한 demansion을 갖도록 만듭니다.</em></p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">def cosine_similarity(query_word_vec, emoji_desc_vec):</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    dot_product = sum(x * y for x, y in zip(query_word_vec, emoji_desc_vec))</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    magnitude_query_word = sum(x * x for x in query_word_vec) ** 0.5</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    magnitude_emoji_desc = sum(x * x for x in emoji_desc_vec) ** 0.5</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    return dot_product / (magnitude_query_word * magnitude_emoji_desc)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># bread와 cake을 vector화 하여 넣은 결과</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">cosine_similarity(bread, cake)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&gt;&gt;&gt; 0.6345</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>상기 식을 사용하여 User가 입력한 Query word를 Vector로 변형한 값과 이미 Vector로 변형하여 넣어둔 Emoji description 두 벡터 사이의 Similarity를 구합니다. 이렇게  Query word Vector와 모든 Emoji description Vector와 비교하여 Top 10개의 Emoji 를 출력하도록 구성합니다.</p>
<p><img loading="lazy" alt="semantic-search-demo" src="https://experimenting-to-learn.github.io/publication/assets/images/semantic-search-demo-c06f88d1656cc5e3396609e0fd950182.png" width="2000" height="1321" class="img_ev3q"><em>‘bread’를 검색한 결과 내용 캡쳐</em></p>
<p>bread를 검색한 결과 Similarity가 0.6345로 낮은 cake은 나오지 않았으며, 0.6886인 butter와 0.6601인 rice craker까지 출력된 것을 확인할 수 있습니다.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="review">Review<a href="https://experimenting-to-learn.github.io/publication/blog/txt-index-with-vector-embeddings#review" class="hash-link" aria-label="Direct link to Review" title="Direct link to Review">​</a></h3>
<p>가장 기본적인 n-gram을 사용하여 키워드에 따른 결과를 확인하고 사용자의 검색 만족도를 높이기 위해 Vector search의 과정과 그 결과를 확인하였습니다.</p>
<p>n-gram에 기반한 Full-text search는 User의 Input query에 있는 word 매칭으로 정확한 데이터를 출력해주었지만, 의미적 관련성이 있는 데이터를 출력해줄 수 없다는 점, 오탈자나 띄어쓰기 오류에 취약하다는 점, 큰 데이터베이스에서 검색을 수행할 때 계산 복잡성이나 저장공간 등에서 효율성이 떨어진다는 단점이 있었다.</p>
<p>이를 보완하고자 고차원의 벡터 공간에 데이터를 매핑하고 벡터간 유사성을 계산하여 검색하는 Vector search 방법을 이용해 의미적 유사성이 높은 데이터를 추천해 줄 수 있었다.</p>
<p>하지만 이런 Vector Search 방법 또한 고질적인 단점이 있다. 훈련 데이터에 없는 단어(Out of Vocabulary)는 처리할 수 없다는 것, 신규 단어를 넣을 경우 Embedding을 다시 계산해야하므로 경우에 따라 리소스 투입이 크다는 것, 경우에 따라 보편적이지 않은 관계성을 만들고자 할 때 어려움이 있다는 것이 문제이다.</p>
<p><img loading="lazy" alt="demo-synthetic-vs-semantic" src="https://experimenting-to-learn.github.io/publication/assets/images/demo-synthetic-vs-semantic-61fcab5d7d304a9198c5758df77a4433.png" width="2000" height="1485" class="img_ev3q"><em>Out of Vocabulary의 예시.  Twitter Corpus에 없는 ‘Keycap’이란 단어를 입력하니, keyword search에서는 결과가 출력되나 vector에선 비슷한 emoji를 찾을 수 없다는 결과가 나온다.</em></p>
<p>이러한 Embedding 리소스에 대한 문제점은 최근 많은 이슈를 가져온 OpenAI의 API를 사용하는 것으로 개선할 수 있다. OpenAI는 자체 개발한 LLM(Large Language Model)에서 사용된 word Embedding 소스를 API를 통해 유료(23년 6월 기준 0.0001$/1K token)로 제공하고 있다. (참고 : <a href="https://platform.openai.com/docs/guides/embeddings/what-are-embeddings" target="_blank" rel="noopener noreferrer">OpenAI API Embedding</a>)</p>
<p>사용 예시를 살펴보면, 미리 OpenAI 의 api key를 설정한 후 아래의 형태로 text를 입력하여 openai.Embedding.create()함수를 호출한다.</p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">word_vector = openai.Embedding.create(</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        input=text, </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        model='text-embedding-ada-002'</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    )</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>그러면 아래와 같은 형태로 respond를 받을 수 있고 해당 embedding 값을 활용함으로 위에 문제된 리소스 뿐만 아니라 OpenAI가 지원하는 다국어 또한 사용이 가능해짐으로 추가적인 언어적 이점이 생겨난다.</p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">{</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  "data": [</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      "embedding": [</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        -0.006929283495992422,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        -0.005336422007530928,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        ...</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        -4.547132266452536e-05,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        -0.024047505110502243</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      ],</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      "index": 0,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      "object": "embedding"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  ],</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  "model": "text-embedding-ada-002",</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  "object": "list",</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  "usage": {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    "prompt_tokens": 5,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    "total_tokens": 5</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>이렇게 LLM 모델이 OpenAI를 통해 합리적인 가격대로 확산되면서 많은 개발자들이 보다 쉽게 자연어 처리에 접근할 수 있게 되었고, 이를 통해 다양한 자연어 Application들이 개발되고 있다.</p>
<p>더불어 최근 새로운 DB의 형태로 뜨고 있는 VectorDB의 발전 또한 이런 행보와 같이 한다고 생각합니다. 쉽게 만들어지는 Embedding 데이터를 저장하고 위처럼 검색하기 위해 Index화 한 후 시스템을 구축해가는 것입니다.</p>
<section data-footnotes="true" class="footnotes"><h2 class="anchor anchorWithStickyNavbar_LWe7 sr-only" id="footnote-label">Footnotes<a href="https://experimenting-to-learn.github.io/publication/blog/txt-index-with-vector-embeddings#footnote-label" class="hash-link" aria-label="Direct link to Footnotes" title="Direct link to Footnotes">​</a></h2>
<ol>
<li id="user-content-fn-1-f4eade">
<p>dudeperf3ct Blog, <a href="https://dudeperf3ct.github.io/lstm/gru/nlp/2019/01/28/Force-of-LSTM-and-GRU/" target="_blank" rel="noopener noreferrer">Force of LSTM and GRU</a> <a href="https://experimenting-to-learn.github.io/publication/blog/txt-index-with-vector-embeddings#user-content-fnref-1-f4eade" data-footnote-backref="" aria-label="Back to reference 1" class="data-footnote-backref">↩</a></p>
</li>
<li id="user-content-fn-2-f4eade">
<p>wikipedia, <a href="https://en.wikipedia.org/wiki/Cosine_similarity" target="_blank" rel="noopener noreferrer">Cosine similarity</a> <a href="https://experimenting-to-learn.github.io/publication/blog/txt-index-with-vector-embeddings#user-content-fnref-2-f4eade" data-footnote-backref="" aria-label="Back to reference 2" class="data-footnote-backref">↩</a></p>
</li>
<li id="user-content-fn-3-f4eade">
<p>Melvin Wevers and Marijn Koolen, <a href="https://doi.org/10.1080/01615440.2020.1760157" target="_blank" rel="noopener noreferrer">Digital begriffsgeschichte: Tracing semantic change using word embeddings</a> <a href="https://experimenting-to-learn.github.io/publication/blog/txt-index-with-vector-embeddings#user-content-fnref-3-f4eade" data-footnote-backref="" aria-label="Back to reference 3" class="data-footnote-backref">↩</a></p>
</li>
<li id="user-content-fn-4-f4eade">
<p>DAMIEN BENVENISTE, <a href="https://newsletter.theaiedge.io/p/deep-dive-how-do-vector-databases" target="_blank" rel="noopener noreferrer">Deep Dive: How do Vector Databases Work</a> <a href="https://experimenting-to-learn.github.io/publication/blog/txt-index-with-vector-embeddings#user-content-fnref-4-f4eade" data-footnote-backref="" aria-label="Back to reference 4" class="data-footnote-backref">↩</a> <a href="https://experimenting-to-learn.github.io/publication/blog/txt-index-with-vector-embeddings#user-content-fnref-4-f4eade-2" data-footnote-backref="" aria-label="Back to reference 4-2" class="data-footnote-backref">↩<sup>2</sup></a></p>
</li>
</ol>
</section>]]></content:encoded>
            <category>semantic-search</category>
            <category>vector-embeddings</category>
            <category>n-gram</category>
        </item>
    </channel>
</rss>